export declare type SetIntersection<A, B> = A extends B ? A : never;
export declare type SetDifference<A, B> = A extends B ? never : A;
export declare type SetComplement<A, A1 extends A> = SetDifference<A, A1>;
export declare type SymmetricDifference<A, B> = SetDifference<A | B, A & B>;
export declare type FunctionKeys<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export declare type NonFunctionKeys<T> = {
    [K in keyof T]: T[K] extends Function ? never : K;
}[keyof T];
export declare type Omit<T, K extends keyof T> = T extends any ? Pick<T, SetComplement<keyof T, K>> : never;
export declare type Intersection<T extends object, U extends object> = T extends any ? Pick<T, SetIntersection<keyof T, keyof U>> : never;
export declare type Diff<T extends object, U extends object> = Pick<T, SetDifference<keyof T, keyof U>>;
export declare type Subtract<T extends T1, T1 extends object> = Pick<T, SetComplement<keyof T, keyof T1>>;
export declare type Overwrite<T extends object, U extends object, I = Diff<T, U> & Intersection<U, T>> = Pick<I, keyof I>;
export declare type Assign<T extends object, U extends object, I = Diff<T, U> & Intersection<U, T> & Diff<U, T>> = Pick<I, keyof I>;
export declare type Unionize<T> = {
    [P in keyof T]: {
        [Q in P]: T[P];
    };
}[keyof T];
export declare type PromiseType<T> = T extends Promise<infer U> ? U : T;
export declare type UnboxPromise<T> = PromiseType<T>;
export declare type DeepReadonly<T> = T extends any[] ? _DeepReadonlyArray<T[number]> : T extends object ? _DeepReadonlyObject<T> : T;
export interface _DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> {
}
export declare type _DeepReadonlyObject<T> = {
    readonly [P in NonFunctionKeys<T>]: DeepReadonly<T[P]>;
};
